@if (Entry != null)
{

    <div class="card border-0 bg-white text-black">

        <div class="card-body bg-white text-black">
            <h5 class="card-title text-black" style="color: #1a1e21"><a href="/entry/@Entry.Id"><strong class="entry-subject text-black " style="text-transform: uppercase;font-size: large;font-weight: bold">@Entry.Subject</strong></a> </h5>
            <br />
            <p class="entry-content text-black-50">@Entry.Content</p>

            @if (MyEntries)
            {
                <EntryFooterFavoriteComponent EntryId="@Entry.Id"
                                      OnFavClicked="@OnFavClicked"
                                      FavoritedCount="@Entry.FavoritedCount"
                                      IsFavorited="@Entry.IsFavorited" />
            }
            else
            {
                <EntryFooterRateFavoriteComponent EntryId="@Entry.Id"
                                          OnFavClicked="@OnFavClicked"
                                          OnVoteClicked="@OnVoteClicked"
                                          Vote="@Entry.VoteType"
                                          FavoritedCount="@Entry.FavoritedCount"
                                          IsFavorited="@Entry.IsFavorited" />
            }

            <EntryFooterAuthorComponent UserName="@Entry.CreatedByUserName"
                                    CreateDate="@Entry.CreatedDate" />

        </div>
    </div>
}


@code {

    [Parameter]
    public EntryDetailsDvo Entry { get; set; }

    [Parameter]
    public bool MyEntries { get; set; } 

    [Inject]
    IVoteService VoteService { get; set; }

    [Inject]
    IFavService FavService { get; set; }

    private async Task OnFavClicked(FavClickedEventArgs args)
    {
        if (args.IsFaved) 
        {
            await FavService.CreateEntryFav(args.EntryId.Value);
            Entry.IsFavorited = true;
            Entry.FavoritedCount++;
        }
        else
        {
            await FavService.DeleteEntryFav(args.EntryId.Value);
            Entry.IsFavorited = false;
            Entry.FavoritedCount--;
        }

        StateHasChanged();
    }

    private async Task OnVoteClicked(VoteClickedEventArgs args)
    {
        if (args.UpVoteDeleted || args.DownVoteDeleted)
        {
            await VoteService.DeleteEntryVote(args.EntryId);
            Entry.VoteType = VoteType.None;
            return;
        }

        if (args.IsUpVoteClicked)
        {
            await VoteService.CreateEntryUpVote(args.EntryId);
            Entry.VoteType = VoteType.UpVote;
            return;
        }

        if (args.IsDownVoteClicked)
        {
            await VoteService.CreateEntryDownVote(args.EntryId);
            Entry.VoteType = VoteType.DownVote;
        }
    }
}
